#set( $comma = "," ) ##

#macro( concat $values $separator ) ##
    #set( $s="" ) ##
    #set( $v = "") ##
    #foreach( $value in $values ) ##
        #set( $v = $v + $s + $value ) ##
        #set( $s = $separator ) ##
    #end ##
$v ##
#end ##

package ${packageName};

#foreach($import in $imports)
    import $import;
#end

public class ${serviceInterfaceImplShortName} implements ${serviceInterfaceShortName} {
    private static Map<HttpPipeline, GeneratedServiceAPI> INSTANCE_MAP = new HashMap<>();

    private final HttpPipeline defaultPipeline;

    public static GeneratedServiceAPI getInstance(final HttpPipeline defaultPipeline) {
        return INSTANCE_MAP.computeIfAbsent(defaultPipeline, pipeline -> new GeneratedServiceAPIImpl(defaultPipeline));
    }

    private GeneratedServiceAPIImpl(HttpPipeline defaultPipeline) {
        this.defaultPipeline = defaultPipeline;
    }

    #foreach($method in $methods)
        #if(!$method.parameters.isEmpty())
            #set($typedParamString = "")
            #set($untypedParamString = "")
            #set($separator="")
            #foreach($param in $method.parameters)
                #set($typedParamString = $typedParamString + $separator + $param.getType() + " " + $param.getName())
                #set($untypedParamString = $untypedParamString + $separator + $param.getName())
                #set($separator = ", ")
            #end
        #end

        @Override public ${method.methodReturnType} ${method.methodName}(${typedParamString}) {
            #if ($method.methodReturnType != "void")
                return ${method.methodName}(defaultPipeline, ${untypedParamString});
            #else
                ${method.methodName}(defaultPipeline, ${untypedParamString});
            #end
        }

        public ${method.methodReturnType} ${method.methodName}(HttpPipeline pipeline, ${typedParamString}) {
            String host = ${method.host};

            // create the request
            HttpRequest httpRequest = new HttpRequest(HttpMethod.${method.httpMethod}, host);

            #if ($method.headers.size() > 0)
                // set headers
                HttpHeaders headers = new HttpHeaders();
                #foreach($headerKey in $method.headers.keySet())
                    headers.add("${headerKey}", ${method.headers.get($headerKey)});
                #end
                httpRequest.setHeaders(headers);
            #end

            #if ($method.body)
                // set the body
                httpRequest.setBody(${method.body.parameterName});
            #end

            // send the request through the pipeline
            HttpResponse response = pipeline.sendSync(httpRequest, context);

            #if( !$method.expectedStatusCodes.isEmpty() )
                // get the response status code and check if the response code was the expected value
                final int responseCode = response.getStatusCode();
                #if( $method.expectedStatusCodes.size() == 1 )
                    boolean expectedResponse = responseCode == ${method.expectedStatusCodes.get(0)};
                #else
                    boolean expectedResponse = Arrays.binarySearch(new int[] { #concat( $method.expectedStatusCodes $comma) }, responseCode) > -1;
                #end
                if (!expectedResponse) {
                    // TODO actual implementation!
                    throw new RuntimeException("Unexpected response code: " + responseCode);
                }
            #end

            #if ($method.methodReturnType != "void")
                // TODO actual implementation!
                return java.util.Arrays.asList("Hello", "World!");
            #end
        }

    #end
}