package net.jonathangiles.clientlibrary.implementation;

import com.azure.core.http.HttpPipeline;
import com.azure.core.util.Context;
import net.jonathangiles.tools.codegen.annotations.*;

import java.lang.reflect.InvocationTargetException;
import java.util.List;

import static net.jonathangiles.tools.codegen.annotations.HttpMethod.*;

// NOTE: This interface is generated by AutoRest. Do not edit the interface directly.
// Based on this interface, the annotation processor will generate an implementation
// that is returned by the static method 'getInstance()'.
@ServiceInterface(name = "GeneratedServiceAPI", host = "{endpoint}")
public interface GeneratedServiceAPI {
    static GeneratedServiceAPI getInstance(HttpPipeline pipeline) {
        // TODO enable when appropriate - it's easier to pass a null pipeline in for now
//        if (pipeline == null) {
//            throw new IllegalArgumentException("pipeline cannot be null");
//        }
        try {
            Class<?> clazz = Class.forName("net.jonathangiles.clientlibrary.implementation.GeneratedServiceAPIImpl");
            return (GeneratedServiceAPI) clazz.getMethod("getInstance", HttpPipeline.class).invoke(null, pipeline);
        } catch (ClassNotFoundException | NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {
            throw new RuntimeException(e);
        }
    }

    @HttpRequestInformation(method = GET, path = "/keys/{path1}", expectedStatusCodes = { 200 })
    List<String> getKeys(@HostParam("endpoint") String endpointParam,
                         @QueryParam("nameParam") String keysName,
                         @QueryParam("valueParam") String valsName,
                         @PathParam("path1") String pathValue,
                         @HeaderParam("fooValueHeader") String fooValue,
                         Context context);

    @HttpRequestInformation(method = PUT, path = "/keys")
    void setKey(@HostParam("endpoint") String endpointP,
                @QueryParam("nameParam") String keysName,
                @HeaderParam("fooValueHeader") String fooValue,
                @BodyParam("text/plain") String key,
                Context context);
}
